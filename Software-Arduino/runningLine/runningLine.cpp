#include "runningLine.h"
#include <string.h>
#include <stdlib.h>
#include <Arduino.h>
#include <SPI.h>

#define SS_PIN 8

static unsigned char numModules = 3;
static const unsigned char numRows = 8;
static const unsigned char numColumns = 8;

static const unsigned char symbolWidth = 5;
static const unsigned char alphabet[][5] = {
  {0x00, 0x00, 0x00, 0x00, 0x00}, // ' '
  {0x00, 0x00, 0xFD, 0x00, 0x00}, // !
  {0x44, 0x02, 0x12, 0x02, 0x44}, // "   <!!!none!!!
  {0x24, 0xFF, 0x24, 0xFF, 0x24}, // #
  {0x12, 0x2A, 0x7F, 0x2A, 0x24}, // $
  {0x44, 0x02, 0x12, 0x02, 0x44}, // %   <!!!none!!!
  {0x76, 0x89, 0x95, 0x62, 0x05}, // &
  {0x44, 0x02, 0x12, 0x02, 0x44}, // '   <!!!none!!!
  {0x00, 0x3C, 0x42, 0x81, 0x00}, // (
  {0x00, 0x81, 0x42, 0x3C, 0x00}, // )
  {0x44, 0x02, 0x12, 0x02, 0x44}, // *   <!!!none!!!
  {0x08, 0x08, 0x3E, 0x08, 0x08}, // +
  {0x44, 0x02, 0x12, 0x02, 0x44}, // ,   <!!!none!!!
  {0x08, 0x08, 0x08, 0x08, 0x08}, // -
  {0x00, 0x01, 0x00, 0x00, 0x00}, // .   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // /   <!!!none!!!
  {0x7E, 0x89, 0x91, 0xA1, 0x7E}, // 0
  {0x00, 0x41, 0xFF, 0x01, 0x00}, // 1
  {0x43, 0x85, 0x89, 0x91, 0x61}, // 2
  {0x42, 0x81, 0x91, 0x91, 0x6E}, // 3
  {0x18, 0x28, 0x48, 0xFF, 0x08}, // 4
  {0xF2, 0x91, 0x91, 0x91, 0x8E}, // 5
  {0x1E, 0x29, 0x49, 0x89, 0x86}, // 6
  {0x80, 0x8F, 0x90, 0xA0, 0xC0}, // 7
  {0x6E, 0x91, 0x91, 0x91, 0x6E}, // 8
  {0x70, 0x89, 0x89, 0x8A, 0x7C}, // 9
  {0x44, 0x02, 0x12, 0x02, 0x44}, // :   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // ;   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // <   <!!!none!!!
  {0x14, 0x14, 0x14, 0x14, 0x14}, // =
  {0x44, 0x02, 0x12, 0x02, 0x44}, // >   <!!!none!!!
  {0x60, 0x80, 0x8D, 0x90, 0x60}, // ?
  {0x66, 0x89, 0x8F, 0x81, 0x7E}, // @
  {0x7F, 0x88, 0x88, 0x88, 0x7F}, // A
  {0xFF, 0x91, 0x91, 0x91, 0x6E}, // B
  {0x7E, 0x81, 0x81, 0x81, 0x42}, // C
  {0xFF, 0x81, 0x81, 0x42, 0x3C}, // D
  {0xFF, 0x91, 0x91, 0x91, 0x81}, // E
  {0xFF, 0x90, 0x90, 0x90, 0x80}, // F
  {0x7E, 0x81, 0x89, 0x89, 0x4E}, // G
  {0xFF, 0x10, 0x10, 0x10, 0xFF}, // H
  {0x81, 0x81, 0xFF, 0x81, 0x81}, // I
  {0x06, 0x01, 0x01, 0x01, 0xFE}, // J
  {0xFF, 0x18, 0x24, 0x42, 0x81}, // K
  {0xFF, 0x01, 0x01, 0x01, 0x01}, // L
  {0xFF, 0x40, 0x30, 0x40, 0xFF}, // M
  {0xFF, 0x40, 0x30, 0x08, 0xFF}, // N
  {0x7E, 0x81, 0x81, 0x81, 0x7E}, // O
  {0xFF, 0x88, 0x88, 0x88, 0x70}, // P
  {0x7E, 0x81, 0x85, 0x82, 0x7D}, // Q
  {0xFF, 0x88, 0x8C, 0x8A, 0x71}, // R
  {0x61, 0x91, 0x91, 0x91, 0x8E}, // S
  {0x80, 0x80, 0xFF, 0x80, 0x80}, // T
  {0xFE, 0x01, 0x01, 0x01, 0xFE}, // U
  {0xF0, 0x0C, 0x03, 0x0C, 0xF0}, // V
  {0xFF, 0x02, 0x0C, 0x02, 0xFF}, // W
  {0xC3, 0x24, 0x18, 0x24, 0xC3}, // X
  {0xE0, 0x10, 0x0F, 0x10, 0xE0}, // Y
  {0x83, 0x85, 0x99, 0xA1, 0xC1}, // Z
  {0x44, 0x02, 0x12, 0x02, 0x44}, // [   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // '\' <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // ]   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // ^   <!!!none!!!
  {0x44, 0x02, 0x12, 0x02, 0x44}, // _   <!!!none!!!
  {0xFF, 0xFF, 0xFF, 0xFF, 0xFF}, // `   <!!!none!!!
  {0x06, 0x29, 0x29, 0x29, 0x1F}, // a
  {0xFF, 0x09, 0x11, 0x11, 0x0E}, // b
  {0x1E, 0x21, 0x21, 0x21, 0x12}, // c
  {0x0E, 0x11, 0x11, 0x09, 0xFF}, // d
  {0x0E, 0x15, 0x15, 0x15, 0x0C}, // e
  {0x08, 0x7F, 0x88, 0x80, 0x40}, // f
  {0x30, 0x49, 0x49, 0x49, 0x7E}, // g
  {0xFF, 0x08, 0x10, 0x10, 0x0F}, // h
  {0x00, 0x00, 0x5F, 0x00, 0x00}, // i
  {0x02, 0x01, 0x21, 0xBE, 0x00}, // j
  {0xFF, 0x04, 0x0A, 0x11, 0x00}, // k
  {0x00, 0x81, 0xFF, 0x01, 0x00}, // l
  {0x3F, 0x20, 0x18, 0x20, 0x1F}, // m
  {0x3F, 0x10, 0x20, 0x20, 0x1F}, // n
  {0x0E, 0x11, 0x11, 0x11, 0x0E}, // o
  {0x3F, 0x24, 0x24, 0x24, 0x18}, // p
  {0x10, 0x28, 0x28, 0x18, 0x3F}, // q
  {0x1F, 0x08, 0x10, 0x10, 0x08}, // r
  {0x09, 0x15, 0x15, 0x15, 0x02}, // s
  {0x20, 0xFE, 0x21, 0x01, 0x02}, // t
  {0x1E, 0x01, 0x01, 0x02, 0x1F}, // u
  {0x1C, 0x02, 0x01, 0x02, 0x1C}, // v
  {0x1E, 0x01, 0x0E, 0x01, 0x1E}, // w
  {0x11, 0x0A, 0x04, 0x0A, 0x11}, // x
  {0x00, 0x39, 0x05, 0x05, 0x3E}, // y
  {0x11, 0x13, 0x15, 0x19, 0x11}  // z
};

static const unsigned char spaceWidth = 1;
static const unsigned char space[] = {0x00};

static unsigned char *alStr = NULL;
static unsigned int strLen;
static unsigned int curIndex = 0;

static const unsigned char *convertChar(char ch)
{
  return alphabet[ch - ' '];
}

static void convertString(char *srcStr)
{
  unsigned int srcStrLen = strlen(srcStr);
  
  strLen = (symbolWidth + spaceWidth) * srcStrLen + (symbolWidth * numModules);
  alStr = (unsigned char*)malloc(srcStrLen * 
       (sizeof(alphabet[0][0]) * symbolWidth + sizeof(space[0]) * spaceWidth) +
       (sizeof(alphabet[0][0]) * numModules));
  
  const unsigned char *buf;
  int offset;
  for (int i = 0; i < srcStrLen; ++i) {
    buf = convertChar(srcStr[i]);
    offset = i * (symbolWidth + spaceWidth);
    for (int j = 0; j < symbolWidth; ++j) {
      *(alStr + offset) = buf[j];
      ++offset;
    }
    for (int j = 0; j < spaceWidth; ++j) {
      *(alStr + offset) = space[j];
      ++offset;
    }
  }
  
  /* Дополнительные пробелы в конце строки */
  buf = convertChar(' ');
  for (int i = 0; i < numModules; ++i) {
    for (int j = 0; j < symbolWidth; ++j) {
      *(alStr + offset) = buf[j];
      ++offset;
    }
    for (int j = 0; j < spaceWidth; ++j) {
      *(alStr + offset) = space[j];
      ++offset;
    }
  }
}

static unsigned char getLetter(unsigned int index)
{
  if (index + curIndex < strLen)
    return alStr[index + curIndex];
  else
    return alStr[index - (strLen - curIndex)];
}

void clearString(void)
{
  if (alStr != NULL)
    free(alStr);
}

void setString(char *str)
{
  clearString();
  convertString(str);
}

void strobe(){
	digitalWrite(SS_PIN,HIGH);
	digitalWrite(SS_PIN,LOW);
}

void shiftString(char diff)
{
  if (alStr == NULL)
    return;
  
  curIndex = (curIndex + diff) % strLen;
}

void printString()
{
  if (alStr == NULL)
    return;
  
  /* Рисует по столбцу в каждом модуле */
  for (int i = 0; i < numColumns; ++i) {
    for (int k = numModules - 1; k >= 0 ; --k) {
      if ((i + k * numColumns) < strLen) {
        SPI.transfer(~getLetter(i + k * numColumns));
        SPI.transfer(0x80 >> i);
      } else {
        SPI.transfer(0x00);
        SPI.transfer(0x00);
      }
    }
    strobe();
    delay(1);
  }
  
  /* Рисует только один столбец */
//  for (int i = 0; i < strLen; ++i) {
//    for (int j = numModules - 1; j >= 0; --j) {
//      /* Если столбец находится в модуле, то рисуем его */
//      if ((i / numColumns) == j) {
//        _txByte(~getLetter(i));
//        _txByte(0x80 >> (i % 8));
//      } else {
//        _txByte(0x00);
//        _txByte(0x00);
//      }
//    }
//    strobe();
////    delay();
//  }
}
